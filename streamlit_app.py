from operator import truediv
import streamlit as st
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import pandas as pd
from datetime import datetime
import os
from PIL import Image
import av
from contextlib import contextmanager
import tempfile
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, RTCConfiguration
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
from facenet_pytorch import MTCNN, InceptionResnetV1
# Th√™m try-except cho import asyncio ƒë·ªÉ x·ª≠ l√Ω l·ªói li√™n quan ƒë·∫øn asyncio
try:
    import asyncio
    import threading
    import uuid
    import json
    from typing import List, Dict, Any, Optional
    from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack
    from aiortc.contrib.media import MediaPlayer, MediaRecorder, MediaRelay
    import logging
    AIORTC_AVAILABLE = True
except ImportError as e:
    AIORTC_AVAILABLE = False
    st.warning(f"aiortc kh√¥ng kh·∫£ d·ª•ng: {str(e)}. Ch·ªâ s·ª≠ d·ª•ng ch·ª©c nƒÉng upload ·∫£nh.")

# Thi·∫øt l·∫≠p giao di·ªán trang
st.set_page_config(
    page_title="H·ªÜ TH·ªêNG QU·∫¢N L√ù C√îNG D√ÇN",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# C·∫•u h√¨nh logging cho aiortc
if AIORTC_AVAILABLE:
    logging.basicConfig(level=logging.INFO)

# L∆∞u tr·ªØ c√°c k·∫øt n·ªëi peer
peer_connections = {}
videoframes = {}
class ObjectDetectionTransformer(VideoProcessorBase):
    def __init__(self):
        # Kh·ªüi t·∫°o MTCNN cho ph√°t hi·ªán khu√¥n m·∫∑t
        self.mtcnn = MTCNN(
            image_size=160, 
            margin=20, 
            min_face_size=20,
            thresholds=[0.6, 0.7, 0.7],  # Ng∆∞·ª°ng ph√°t hi·ªán ba b∆∞·ªõc
            factor=0.709, 
            post_process=True,
            device='cuda' if torch.cuda.is_available() else 'cpu'
        )
        
        # Kh·ªüi t·∫°o FaceNet model (t√πy ch·ªçn n·∫øu b·∫°n mu·ªën nh·∫≠n d·∫°ng khu√¥n m·∫∑t)
        self.facenet = InceptionResnetV1(pretrained='vggface2').eval()
        if torch.cuda.is_available():
            self.facenet = self.facenet.cuda()
            
        # Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ embedding khu√¥n m·∫∑t (t√πy ch·ªçn)
        self.known_face_embeddings = []
        self.known_face_names = []

    def recv(self, frame):
        img = frame.to_ndarray(format="bgr24")
        
        # Chuy·ªÉn ƒë·ªïi t·ª´ BGR sang RGB (MTCNN s·ª≠ d·ª•ng RGB)
        rgb_img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        
        # Ph√°t hi·ªán khu√¥n m·∫∑t b·∫±ng MTCNN
        boxes, probs, landmarks = self.mtcnn.detect(rgb_img, landmarks=True)
        
        # V·∫Ω c√°c khu√¥n m·∫∑t ƒë∆∞·ª£c ph√°t hi·ªán
        if boxes is not None:
            for i, (box, landmark) in enumerate(zip(boxes, landmarks)):
                # L·∫•y t·ªça ƒë·ªô khu√¥n m·∫∑t
                x1, y1, x2, y2 = [int(p) for p in box]
                
                # V·∫Ω h√¨nh ch·ªØ nh·∫≠t xung quanh khu√¥n m·∫∑t
                cv2.rectangle(img, (x1, y1), (x2, y2), (0, 255, 0), 2)
                
                # V·∫Ω c√°c ƒëi·ªÉm landmark (m·∫Øt, m≈©i, mi·ªáng)
                for p in landmark:
                    cv2.circle(img, (int(p[0]), int(p[1])), 2, (0, 0, 255), -1)
                
                # Hi·ªÉn th·ªã x√°c su·∫•t ph√°t hi·ªán
                confidence = f"Confidence: {probs[i]:.2f}"
                cv2.putText(img, confidence, (x1, y1-10), 
                            cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
                # T√πy ch·ªçn: Tr√≠ch xu·∫•t embedding khu√¥n m·∫∑t (n·∫øu b·∫°n mu·ªën nh·∫≠n d·∫°ng)
                # face = self.mtcnn(rgb_img[y1:y2, x1:x2])
                # if face is not None:
                #     with torch.no_grad():
                #         embedding = self.facenet(face.unsqueeze(0))
                #         # ·ªû ƒë√¢y b·∫°n c√≥ th·ªÉ so s√°nh embedding v·ªõi c√°c khu√¥n m·∫∑t ƒë√£ bi·∫øt
        
        # Hi·ªÉn th·ªã s·ªë l∆∞·ª£ng khu√¥n m·∫∑t ƒë∆∞·ª£c ph√°t hi·ªán
        if boxes is not None:
            face_count = len(boxes)
            cv2.putText(img, f"Faces: {face_count}", (10, 30), 
                        cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
        
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        padding: 20px;
    }
    .stButton>button {
        width: 100%;
        margin-top: 10px;
        background-color: #0066cc;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #004d99;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .success-message {
        padding: 20px;
        background-color: #4CAF50;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .error-message {
        padding: 20px;
        background-color: #f44336;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .info-card {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .info-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    .feature-button {
        background-color: #ffffff;
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        margin: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .feature-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .camera-feed {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .login-form {
        max-width: 500px;
        margin: 0 auto;
        padding: 30px;
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .login-header {
        text-align: center;
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)


# Kh·ªüi t·∫°o session state
if 'citizens_data' not in st.session_state:
    st.session_state.citizens_data = pd.DataFrame(columns=[
        'id', 'cccd', 'name', 'dob', 'sex', 'address', 'expdate', 'scan_date', 'image_path'
    ])

# Th√™m session state cho ƒëƒÉng nh·∫≠p
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if 'username' not in st.session_state:
    st.session_state.username = ""

# Th√™m session state cho ƒëi·ªÅu h∆∞·ªõng trang
if 'page' not in st.session_state:
    st.session_state.page = None
    
# Th√™m session state cho menu choice
if 'menu_choice' not in st.session_state:
    st.session_state.menu_choice = "Trang ch·ªß"

# Th√™m session state cho aiortc
if 'peer_connection_id' not in st.session_state:
    st.session_state.peer_connection_id = None

if 'video_processor' not in st.session_state:
    st.session_state.video_processor = None

# Danh s√°ch t√†i kho·∫£n m·∫´u (trong th·ª±c t·∫ø n√™n l∆∞u trong c∆° s·ªü d·ªØ li·ªáu v√† m√£ h√≥a m·∫≠t kh·∫©u)
USERS = {
    "admin": "admin123",
    "user": "user123"
}

# ICE servers configuration for aiortc


def login_page():
    st.markdown("<h1 style='text-align: center;'>ƒêƒÉng nh·∫≠p H·ªá th·ªëng</h1>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="info-card" style="padding: 30px;">
            <h3 style="text-align: center;">ƒêƒÉng nh·∫≠p</h3>
            <p style="text-align: center;">Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n.</p>
        </div>
        """, unsafe_allow_html=True)
        
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        
        if st.button("ƒêƒÉng nh·∫≠p"):
            if username in USERS and USERS[username] == password:
                st.session_state.logged_in = True
                st.session_state.username = username
                st.success(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng, {username}")
                st.rerun()
            else:
                st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")



 
import requests
def surveillance_camera():
    st.markdown("<h2 style='text-align: center;'>Gi√°m s√°t Camera</h2>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div class="info-card">
        <h3>Gi√°m s√°t an ninh</h3>
        <p>Theo d√µi v√† ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng qua camera</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add option to choose between aiortc and file upload
        camera_option = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c:",
            ["Camera tr·ª±c ti·∫øp (aiortc)", "Upload video/·∫£nh"],
            key="camera_option"
        )
        
        if camera_option == "Camera tr·ª±c ti·∫øp (aiortc)":
            try:
                if AIORTC_AVAILABLE:
                    response = requests.get(
                        "https://iewcom.metered.live/api/v1/turn/credentials",
                        params={"apiKey": "5b0cc93867e02c9b2e8ef46de385169008aa"}
                    )
                    ice_servers = response.json()

                    # S·ª≠ d·ª•ng trong webrtc_streamer
                   
                    # S·ª≠ d·ª•ng aiortc
                    
                    webrtc_ctx = webrtc_streamer(
                    key="camera-stream",
                    mode=WebRtcMode.SENDRECV,
                    rtc_configuration={"iceServers": ice_servers},
                    video_processor_factory=ObjectDetectionTransformer,
                    
                   media_stream_constraints = {
                    "video": {
                        "width": {"min": 1280, "ideal": 1920, "max": 3840},
                        "height": {"min": 720, "ideal": 1080, "max": 2160},
                        "frameRate": {"min": 15, "ideal": 30, "max": 60}
                    },
                    "audio": False
},

                    async_processing=False,
                    sendback_audio=False,
                )
                    
                    # Display connection status
                    if st.session_state.peer_connection_id:
                        st.success("‚úÖ Camera ƒëang ho·∫°t ƒë·ªông")
                    else:
                        st.info("üì∑ Nh·∫•n 'B·∫Øt ƒë·∫ßu Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu camera")
                else:
                    st.error("aiortc kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng upload ·∫£nh.")
                    
            except Exception as e:
                st.error(f"L·ªói k·∫øt n·ªëi camera: {str(e)}")
                st.info("Vui l√≤ng th·ª≠ s·ª≠ d·ª•ng t√πy ch·ªçn 'Upload video/·∫£nh' b√™n d∆∞·ªõi")
                
        else:
            # Alternative: File upload for surveillance
            uploaded_file = st.file_uploader(
                "T·∫£i l√™n video ho·∫∑c ·∫£nh ƒë·ªÉ ph√¢n t√≠ch",
                type=['mp4', 'avi', 'mov', 'jpg', 'jpeg', 'png'],
                key="surveillance_upload"
            )
            
            if uploaded_file is not None:
                if uploaded_file.type.startswith('image'):
                    image = Image.open(uploaded_file)
                    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
                    
                    if st.button("Ph√¢n t√≠ch ·∫£nh"):
                        st.success("ƒêang ph√¢n t√≠ch ·∫£nh...")
                        # Add your image analysis logic here
                        
                else:
                    st.video(uploaded_file)
                    if st.button("Ph√¢n t√≠ch video"):
                        st.success("ƒêang ph√¢n t√≠ch video...")
                        # Add your video analysis logic here

    with col2:
        st.markdown("""
        <div class="info-card">
        <h3>ƒêi·ªÅu khi·ªÉn Camera</h3>
        <p>C√†i ƒë·∫∑t v√† ƒëi·ªÅu khi·ªÉn camera gi√°m s√°t</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Camera controls
        detection_options = st.multiselect(
            "Ch·ªçn c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn ph√°t hi·ªán:",
            ["Khu√¥n m·∫∑t", "Ph∆∞∆°ng ti·ªán", "V·∫≠t th·ªÉ kh·∫£ nghi"],
            default=["Khu√¥n m·∫∑t"],
            key="detection_options"
        )
        
        sensitivity = st.slider("ƒê·ªô nh·∫°y ph√°t hi·ªán", 0, 100, 50, key="sensitivity")
        
        if st.button("Ch·ª•p ·∫£nh", key="capture_btn"):
            st.success("·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ª•p th√†nh c√¥ng!")
            
        # Add troubleshooting section
        with st.expander("üîß Kh·∫Øc ph·ª•c s·ª± c·ªë"):
            st.markdown("""
            **N·∫øu camera kh√¥ng ho·∫°t ƒë·ªông:**
            1. L√†m m·ªõi trang (F5)
            2. Ki·ªÉm tra quy·ªÅn truy c·∫≠p camera
            3. Th·ª≠ s·ª≠ d·ª•ng tr√¨nh duy·ªát kh√°c
            4. S·ª≠ d·ª•ng t√πy ch·ªçn 'Upload video/·∫£nh'
            """)

def process_image_for_qr(image):
    """
    X·ª≠ l√Ω ·∫£nh ƒë·ªÉ t√¨m v√† gi·∫£i m√£ QR code
    """
    try:
        # Chuy·ªÉn ƒë·ªïi ·∫£nh sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
        if isinstance(image, np.ndarray):
            frame_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        else:
            frame_rgb = np.array(image)

        # Gi·∫£i m√£ QR
        decoded_objects = decode(frame_rgb)
        
        for obj in decoded_objects:
            qr_data = obj.data.decode('utf-8')
            citizen_info = qr_data.split('|')
            
            if len(citizen_info) >= 7:
                # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
                os.makedirs("uploaded_images", exist_ok=True)
                
                # T·∫°o t√™n file ·∫£nh v·ªõi timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                image_filename = f"citizen_image_{timestamp}.jpg"
                image_path = os.path.join("uploaded_images", image_filename)
                
                # L∆∞u ·∫£nh
                if isinstance(image, np.ndarray):
                    cv2.imwrite(image_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
                else:
                    image.save(image_path)
    
                # T·∫°o b·∫£n ghi m·ªõi
                new_data = {
                    'id': citizen_info[0],
                    'cccd': citizen_info[1],
                    'name': citizen_info[2],
                    'dob': citizen_info[3],
                    'sex': citizen_info[4],
                    'address': citizen_info[5],
                    'expdate': citizen_info[6],
                    'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'image_path': image_path
                }
                
                # C·∫≠p nh·∫≠t DataFrame
                st.session_state.citizens_data = pd.concat([
                    st.session_state.citizens_data,
                    pd.DataFrame([new_data])
                ], ignore_index=True)
                
                return True, "QR code processed successfully!"
                
        return False, "L·ªói kh√¥ng x√°c ƒë·ªãnh."
    
    except Exception as e:
        return False, f"L·ªói: {str(e)}"

# Add this new class for QR code detection
class QRCodeProcessor(VideoProcessorBase):
    def __init__(self):
        self.qr_detected = False
        self.qr_data = None
        self.last_detection_time = 0
        
    def recv(self, frame):
        img = frame.to_ndarray(format="bgr24")
        
        # Convert to RGB for QR detection
        img_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        
        # Detect QR codes
        decoded_objects = decode(img_rgb)
        
        current_time = datetime.now().timestamp()
        
        for obj in decoded_objects:
            # Draw bounding box around QR code
            points = obj.polygon
            if len(points) > 4:
                hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                points = hull
            
            # Draw the bounding box
            n = len(points)
            for j in range(0, n):
                cv2.line(img, tuple(points[j]), tuple(points[(j+1) % n]), (0, 255, 0), 3)
            
            # Add text overlay
            cv2.putText(img, "QR Code Detected", (10, 30), 
                       cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
            
            # Store QR data (with rate limiting to avoid spam)
            if current_time - self.last_detection_time > 2:  # 2 second cooldown
                self.qr_data = obj.data.decode('utf-8')
                self.qr_detected = True
                self.last_detection_time = current_time
        
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# Update the scan_qr_code function
def scan_qr_code():
    """Enhanced QR code scanning with WebRTC support"""
    st.markdown("<h2 style='text-align: center;'>Qu√©t m√£ QR CCCD</h2>", unsafe_allow_html=True)
    
    # Create tabs for different input methods
    tab1, tab2 = st.tabs(["üìÅ Upload ·∫¢nh", "üì∑ Camera WebRTC"])
    
    with tab1:
        st.markdown("""
        <div class="info-card">
        <h3>T·∫£i l√™n ·∫£nh QR Code</h3>
        <p>ƒê·ªãnh d·∫°ng h·ªó tr·ª£: JPG, JPEG, PNG</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh ch·ª©a QR code", 
            type=['jpg', 'jpeg', 'png'],
            key="qr_upload"
        )
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
            
            if st.button("X·ª≠ l√Ω QR Code", key="process_qr"):
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    success, message = process_image_for_qr(image)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
    
    with tab2:
        st.markdown("""
        <div class="info-card">
        <h3>Qu√©t QR Code qua Camera</h3>
        <p>S·ª≠ d·ª•ng WebRTC ƒë·ªÉ qu√©t QR code tr·ª±c ti·∫øp t·ª´ camera</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Initialize QR processor in session state
        if 'qr_processor' not in st.session_state:
            st.session_state.qr_processor = QRCodeProcessor()
        
        # WebRTC configuration for QR scanning
        try:
            if AIORTC_AVAILABLE:
                # Get ICE servers
                response = requests.get(
                    "https://iewcom.metered.live/api/v1/turn/credentials",
                    params={"apiKey": "5b0cc93867e02c9b2e8ef46de385169008aa"}
                )
                ice_servers = response.json()
                
                # Create WebRTC streamer for QR scanning
                webrtc_ctx = webrtc_streamer(
                    key="qr-scanner",
                    mode=WebRtcMode.SENDRECV,
                    rtc_configuration={"iceServers": ice_servers},
                    video_processor_factory=QRCodeProcessor,
                    media_stream_constraints = {
    "video": {
        "width": {"min": 1280, "ideal": 1920, "max": 3840},
        "height": {"min": 720, "ideal": 1080, "max": 2160},
        "frameRate": {"min": 15, "ideal": 30, "max": 60}
    },
    "audio": False
},

                    async_processing=False,
                    sendback_audio=False,
                )
                
                # Display instructions
                st.markdown("""
                <div style="background-color: #e3f2fd; padding: 15px; border-radius: 5px; margin: 10px 0;">
                <h4>üìã H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng:</h4>
                <ul>
                    <li>Nh·∫•n "START" ƒë·ªÉ b·∫Øt ƒë·∫ßu camera</li>
                    <li>ƒê∆∞a QR code v√†o khung h√¨nh</li>
                    <li>H·ªá th·ªëng s·∫Ω t·ª± ƒë·ªông ph√°t hi·ªán v√† x·ª≠ l√Ω QR code</li>
                    <li>QR code ƒë∆∞·ª£c ph√°t hi·ªán s·∫Ω c√≥ khung m√†u xanh</li>
                </ul>
                </div>
                """, unsafe_allow_html=True)
                
                # Check for QR detection
                if webrtc_ctx.video_processor:
                    processor = webrtc_ctx.video_processor
                    
                    # Display connection status
                    if webrtc_ctx.state.playing:
                        st.success("‚úÖ Camera ƒëang ho·∫°t ƒë·ªông - S·∫µn s√†ng qu√©t QR code")
                        
                        # Check if QR code was detected
                        if hasattr(processor, 'qr_detected') and processor.qr_detected:
                            st.balloons()
                            st.success("üéâ QR Code ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán!")
                            
                            # Process the detected QR code
                            if hasattr(processor, 'qr_data') and processor.qr_data:
                                success, message = process_qr_detection(processor.qr_data)
                                if success:
                                    st.success(f"‚úÖ {message}")
                                    # Display the processed citizen info
                                    display_latest_citizen_info()
                                else:
                                    st.error(f"‚ùå {message}")
                                
                                # Reset detection flag
                                processor.qr_detected = False
                                processor.qr_data = None
                    else:
                        st.info("üì∑ Nh·∫•n 'START' ƒë·ªÉ b·∫Øt ƒë·∫ßu qu√©t QR code")
                
            else:
                st.error("‚ùå WebRTC kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng s·ª≠ d·ª•ng tab 'Upload ·∫¢nh'")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói kh·ªüi t·∫°o camera: {str(e)}")
            st.info("üí° Th·ª≠ l√†m m·ªõi trang ho·∫∑c s·ª≠ d·ª•ng tab 'Upload ·∫¢nh'")
            
            # Fallback to simple camera input
            st.markdown("---")
            st.markdown("### üì∑ Camera ƒë∆°n gi·∫£n (Fallback)")
            camera_image = st.camera_input("Ch·ª•p ·∫£nh QR Code", key="qr_camera_fallback")
            
            if camera_image is not None:
                image = Image.open(camera_image)
                st.image(image, caption="·∫¢nh ƒë√£ ch·ª•p", use_container_width=True)
                
                if st.button("X·ª≠ l√Ω QR Code", key="process_camera_qr_fallback"):
                    with st.spinner("ƒêang x·ª≠ l√Ω..."):
                        success, message = process_image_for_qr(image)
                        if success:
                            st.success(message)
                        else:
                            st.error("Kh√¥ng t√¨m th·∫•y m√£ QR trong ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.")
def display_latest_citizen_info():
    """Display information of the most recently added citizen"""
    if not st.session_state.citizens_data.empty:
        latest_citizen = st.session_state.citizens_data.iloc[-1]
        
        st.markdown("""
        <div style="background-color: #e8f5e9; padding: 20px; border-radius: 10px; margin-top: 20px;">
        <h4 style="color: #2e7d32;">üìã Th√¥ng tin c√¥ng d√¢n v·ª´a qu√©t:</h4>
        </div>
        """, unsafe_allow_html=True)
        
        col1, col2 = st.columns(2)
        with col1:
            st.write(f"**ID:** {latest_citizen['id']}")
            st.write(f"**S·ªë CCCD:** {latest_citizen['cccd']}")
            st.write(f"**H·ªç v√† t√™n:** {latest_citizen['name']}")
            st.write(f"**Ng√†y sinh:** {latest_citizen['dob']}")
        
        with col2:
            st.write(f"**Gi·ªõi t√≠nh:** {latest_citizen['sex']}")
            st.write(f"**ƒê·ªãa ch·ªâ:** {latest_citizen['address']}")
            st.write(f"**Ng√†y h·∫øt h·∫°n:** {latest_citizen['expdate']}")
            st.write(f"**Th·ªùi gian qu√©t:** {latest_citizen['scan_date']}")

def process_qr_detection(qr_data):
    """Process detected QR code data"""
    try:
        citizen_info = qr_data.split('|')
        
        if len(citizen_info) >= 7:
            st.success("‚úÖ QR code ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán v√† x·ª≠ l√Ω th√†nh c√¥ng!")
            
            # Save information to DataFrame
            new_data = {
                'id': citizen_info[0],
                'cccd': citizen_info[1],
                'name': citizen_info[2],
                'dob': citizen_info[3],
                'sex': citizen_info[4],
                'address': citizen_info[5],
                'expdate': citizen_info[6],
                'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'image_path': "camera_capture"
            }
            
            st.session_state.citizens_data = pd.concat([
                st.session_state.citizens_data,
                pd.DataFrame([new_data])
            ], ignore_index=True)
            
            # Display citizen information
            display_citizen_info(citizen_info)
            
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω QR code: {str(e)}")

def display_citizen_info(citizen_info):
    """Display citizen information in a formatted way"""
    st.markdown("""
    <div style="background-color: #e8f5e9; padding: 20px; border-radius: 10px; margin-top: 20px;">
    <h4 style="color: #2e7d32;">Th√¥ng tin c√¥ng d√¢n:</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**ID:** {citizen_info[0]}")
        st.write(f"**S·ªë CCCD:** {citizen_info[1]}")
        st.write(f"**H·ªç v√† t√™n:** {citizen_info[2]}")
        st.write(f"**Ng√†y sinh:** {citizen_info[3]}")
    
    with col2:
        st.write(f"**Gi·ªõi t√≠nh:** {citizen_info[4]}")
        st.write(f"**ƒê·ªãa ch·ªâ:** {citizen_info[5]}")
        st.write(f"**Ng√†y h·∫øt h·∫°n:** {citizen_info[6]}")

# Add this to the top of your main() function
def reset_session_on_error():
    """Reset session state if there are WebRTC errors"""
    if 'aiortc_error_count' not in st.session_state:
        st.session_state.aiortc_error_count = 0
    
    if st.session_state.aiortc_error_count > 3:
        st.warning("Ph√°t hi·ªán nhi·ªÅu l·ªói aiortc. ƒêang reset session...")
        for key in list(st.session_state.keys()):
            if 'aiortc' in key.lower() or 'peer' in key.lower():
                del st.session_state[key]
        st.session_state.aiortc_error_count = 0
        st.rerun()

def show_citizen_data():
    st.markdown("<h2 style='text-align: center;'>D·ªØ li·ªáu C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    if not st.session_state.citizens_data.empty:
        for index, row in st.session_state.citizens_data.iterrows():
            with st.expander(f"C√¥ng d√¢n:{row['name']} - CCCD: {row['cccd']}"):
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if os.path.exists(row['image_path']):
                        st.image(row['image_path'], caption="·∫£nh CCCD", use_container_width=True)
                    else:
                        st.warning("·∫¢nh CCCD kh√¥ng t·ªìn t·∫°i!")
                
                with col2:
                    st.markdown(f"""
                    **ID:** {row['id']}  
                    **S·ªë CCCD:** {row['cccd']}  
                    **T√™n:** {row['name']}  
                    **Ng√†y sinh:** {row['dob']}  
                    **Gi·ªõi t√≠nh:** {row['sex']}  
                    **ƒê·ªãa ch·ªâ:** {row['address']}  
                    **Ng√†y h·∫øt h·∫°n:** {row['expdate']}  
                    **Ng√†y qu√©t:** {row['scan_date']}
                    """)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng d√¢n n√†o.")


def show_homepage():
    st.markdown("<h1 style='text-align: center;'>H·ªá th·ªëng Qu·∫£n l√Ω C√¥ng d√¢n</h1>", unsafe_allow_html=True)
    
    # Grid layout cho c√°c ch·ª©c nƒÉng
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-button">
            <h3>Qu√©t QR CCCD</h3>
            <p>Qu√©t m√£ QR t·ª´ CCCD</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng qu√©t QR
        if st.button("Qu√©t QR CCCD"):
            st.session_state.page = "scan_qr"
            st.session_state.menu_choice = "Qu√©t QR CCCD"
            st.rerun()
        
    with col2:
        st.markdown("""
        <div class="feature-button">
            <h3>Qu·∫£n l√Ω C√¥ng d√¢n</h3>
            <p>Qu·∫£n l√Ω d·ªØ li·ªáu c√¥ng d√¢n hi·ªáu qu·∫£ v√† d·ªÖ d√†ng.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng qu·∫£n l√Ω d·ªØ li·ªáu
        if st.button("Xem d·ªØ li·ªáu c√¥ng d√¢n"):
            st.session_state.page = "view_data"
            st.session_state.menu_choice = "Xem d·ªØ li·ªáu"
            st.rerun()
        
    with col3:
        st.markdown("""
        <div class="feature-button">
            <h3>Camera Gi√°m S√°t</h3>
            <p>Theo d√µi qua camera an ninh</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng camera gi√°m s√°t
        if st.button("Camera gi√°m s√°t"):
            st.session_state.page = "camera"
            st.session_state.menu_choice = "Camera Gi√°m s√°t"
            st.rerun()
    
    # Ki·ªÉm tra n·∫øu c√≥ chuy·ªÉn trang t·ª´ c√°c n√∫t
    if 'page' in st.session_state:
        if st.session_state.page == "scan_qr":
            scan_qr_code()
            st.session_state.page = None
        elif st.session_state.page == "view_data":
            show_citizen_data()
            st.session_state.page = None
        elif st.session_state.page == "camera":
            surveillance_camera()
            st.session_state.page = None

def show_statistics():
    st.markdown("<h2 style='text-align: center;'>Th·ªëng k√™</h2>", unsafe_allow_html=True)
    st.write("Hi·ªÉn th·ªã c√°c s·ªë li·ªáu th·ªëng k√™ li√™n quan ƒë·∫øn c√¥ng d√¢n.")
    # Th√™m code hi·ªÉn th·ªã th·ªëng k√™

def show_settings():
    st.markdown("<h2 style='text-align: center;'>C√†i ƒë·∫∑t</h2>", unsafe_allow_html=True)
    st.write("T√πy ch·ªânh c√°c thi·∫øt l·∫≠p c·ªßa h·ªá th·ªëng t·∫°i ƒë√¢y.")
    # Th√™m code c√†i ƒë·∫∑t
from pathlib import Path

# Cloud environment detection
def is_streamlit_cloud():
    """Detect if running on Streamlit Cloud"""
    return (
        os.getenv("STREAMLIT_SHARING_MODE") == "true" or
        "streamlit.io" in os.getenv("HOSTNAME", "") or
        os.path.exists("/.streamlit")
    )
def setup_cloud_environment():
    """Setup environment cho Streamlit Cloud"""
    
    if is_streamlit_cloud():
        st.sidebar.info("üåê Running on Streamlit Cloud")
        
        # Cloud-specific configurations
        os.environ["OPENCV_VIDEOIO_PRIORITY_MSMF"] = "0"  # Disable MSMF on Windows
        os.environ["OPENCV_VIDEOIO_MSMF_ENABLE_HW_TRANSFORMS"] = "0"
        
        # Temporary directories
        temp_dirs = ["/tmp/uploads", "/tmp/rtc_cache", "/tmp/video_processing"]
        for temp_dir in temp_dirs:
            Path(temp_dir).mkdir(exist_ok=True)
        
        return True
    else:
        st.sidebar.info("üíª Running locally")
        return False
def main():
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if not st.session_state.logged_in:
        login_page()
        return
    is_cloud = setup_cloud_environment()
    if is_cloud:
        st.info("""
        üåê **Cloud Deployment Notes:**
        - HTTPS enabled automatically
        - Camera access requires user permission
        - File uploads limited to 200MB
        - Temporary files auto-cleaned
        """)
    # Hi·ªÉn th·ªã giao di·ªán ch√≠nh sau khi ƒëƒÉng nh·∫≠p
    st.sidebar.markdown("<h1 style='text-align: center;'>Ch√†o m·ª´ng üì∑</h1>", unsafe_allow_html=True)
    st.sidebar.markdown("<h2 style='text-align: center;'>Qu·∫£n l√Ω C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
    st.sidebar.markdown(f"""<div style='text-align: center; padding: 10px; background-color: #e8f5e9; 
                        border-radius: 5px; margin-bottom: 20px;'>
                         <b>{st.session_state.username}</b></div>""", 
                        unsafe_allow_html=True)
    
    menu = [
        "Trang ch·ªß",
        "Qu√©t QR CCCD",
        "Xem d·ªØ li·ªáu",
        "Camera Gi√°m s√°t",
        "Th·ªëng k√™",
        "C√†i ƒë·∫∑t"
    ]
    
    choice = st.sidebar.selectbox(
        "Ch·ªçn ch·ª©c nƒÉng", 
        menu, 
        index=menu.index(st.session_state.menu_choice),
        key="main_menu"
    )
    
    # Hi·ªÉn th·ªã c√°c n√∫t ch·ª©c nƒÉng ph·ª• trong sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Ch·ª©c nƒÉng nhanh")
    
    if st.sidebar.button("üì∑ Camera"):
        st.session_state.page = "camera"
        st.session_state.menu_choice = "Camera Gi√°m s√°t"
        st.rerun()
      
    if st.sidebar.button("üìä B√°o c√°o"):
        st.session_state.page = "reports"
        st.session_state.menu_choice = "Th·ªëng k√™"
        st.rerun()
        
    if st.sidebar.button("‚öôÔ∏è C√†i ƒë·∫∑t"):
        st.session_state.page = "settings"
        st.session_state.menu_choice = "C√†i ƒë·∫∑t"
        st.rerun()
    
    # N√∫t ƒëƒÉng xu·∫•t
    if st.sidebar.button("üö™ ƒêƒÉng xu·∫•t"):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.rerun()

    if choice == "Trang ch·ªß":
        show_homepage()
    elif choice == "Qu√©t QR CCCD":
        scan_qr_code()
    elif choice == "Xem d·ªØ li·ªáu":
        show_citizen_data()
    elif choice == "Camera Gi√°m s√°t":
        surveillance_camera()
    elif choice == "Th·ªëng k√™":
        show_statistics()
    elif choice == "C√†i ƒë·∫∑t":
        show_settings()

if __name__ == '__main__':
    main()