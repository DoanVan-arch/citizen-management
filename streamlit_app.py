import streamlit as st
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import pandas as pd
from datetime import datetime
import os
from PIL import Image

# Thi·∫øt l·∫≠p giao di·ªán trang
st.set_page_config(
    page_title="H·ªá th·ªëng Qu·∫£n l√Ω C√¥ng d√¢n",
    page_icon="üèõÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        padding: 20px;
    }
    .stButton>button {
        width: 100%;
        margin-top: 10px;
        background-color: #0066cc;
        color: white;
    }
    .success-message {
        padding: 20px;
        background-color: #4CAF50;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
    }
    .error-message {
        padding: 20px;
        background-color: #f44336;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
    }
    .info-card {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)

# Kh·ªüi t·∫°o session state
if 'citizens_data' not in st.session_state:
    st.session_state.citizens_data = pd.DataFrame(columns=['id', 'name', 'dob', 'address', 'scan_date', 'image_path'])

def process_image_for_qr(image):
    try:
        # Chuy·ªÉn ƒë·ªïi ·∫£nh sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
        if isinstance(image, np.ndarray):
            frame_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        else:
            frame_rgb = np.array(image)

        # Gi·∫£i m√£ QR
        decoded_objects = decode(frame_rgb)
        
        for obj in decoded_objects:
            qr_data = obj.data.decode('utf-8')
            citizen_info = qr_data.split('|')
            
            if len(citizen_info) >= 4:
                # L∆∞u ·∫£nh
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                image_filename = f"citizen_image_{timestamp}.jpg"
                image_path = os.path.join("uploaded_images", image_filename)
                
                # T·∫°o th∆∞ m·ª•c n·∫øu ch∆∞a t·ªìn t·∫°i
                os.makedirs("uploaded_images", exist_ok=True)
                
                # L∆∞u ·∫£nh
                if isinstance(image, np.ndarray):
                    cv2.imwrite(image_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
                else:
                    image.save(image_path)

                new_data = {
                    'id': citizen_info[0],
                    'name': citizen_info[1],
                    'dob': citizen_info[2],
                    'address': citizen_info[3],
                    'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'image_path': image_path
                }
                
                st.session_state.citizens_data = pd.concat([
                    st.session_state.citizens_data,
                    pd.DataFrame([new_data])
                ], ignore_index=True)
                
                return True, "Qu√©t QR th√†nh c√¥ng!"
                
        return False, "Kh√¥ng t√¨m th·∫•y m√£ QR trong ·∫£nh."
    
    except Exception as e:
        return False, f"L·ªói khi x·ª≠ l√Ω ·∫£nh: {str(e)}"

def scan_qr_code():
    st.markdown("<h2 style='text-align: center;'>Qu√©t m√£ QR CCCD</h2>", unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    
    with col1:
        st.markdown("""
        <div class="info-card">
            <h3>T·∫£i l√™n ·∫£nh CCCD</h3>
            <p>H·ªó tr·ª£ c√°c ƒë·ªãnh d·∫°ng: JPG, JPEG, PNG</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader("Ch·ªçn ·∫£nh CCCD", type=['jpg', 'jpeg', 'png'])
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_column_width=True)
            
            if st.button("X·ª≠ l√Ω ·∫£nh"):
                success, message = process_image_for_qr(image)
                if success:
                    st.markdown(f'<div class="success-message">{message}</div>', unsafe_allow_html=True)
                else:
                    st.markdown(f'<div class="error-message">{message}</div>', unsafe_allow_html=True)

    with col2:
        st.markdown("""
        <div class="info-card">
            <h3>Qu√©t qua Camera</h3>
            <p>S·ª≠ d·ª•ng camera ƒë·ªÉ qu√©t tr·ª±c ti·∫øp</p>
        </div>
        """, unsafe_allow_html=True)
        
        if st.button("B·∫≠t Camera"):
            cap = init_camera()
            if cap is None:
                return
            
            frame_placeholder = st.empty()
            stop_button = st.button("D·ª´ng qu√©t")
            
            try:
                while not stop_button:
                    ret, frame = cap.read()
                    if not ret:
                        st.error("Kh√¥ng th·ªÉ ƒë·ªçc frame t·ª´ camera")
                        break
                    
                    frame_rgb = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
                    success, message = process_image_for_qr(frame_rgb)
                    
                    if success:
                        st.markdown(f'<div class="success-message">{message}</div>', unsafe_allow_html=True)
                        break
                    
                    frame_placeholder.image(frame_rgb, channels="RGB")
            except Exception as e:
                st.error(f"L·ªói: {str(e)}")
            finally:
                cap.release()

def show_citizen_data():
    st.markdown("<h2 style='text-align: center;'>D·ªØ li·ªáu C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    if not st.session_state.citizens_data.empty:
        # Hi·ªÉn th·ªã d·ªØ li·ªáu d·∫°ng b·∫£ng v·ªõi ƒë·ªãnh d·∫°ng ƒë·∫πp
        st.markdown("""
        <style>
        .dataframe {
            font-size: 14px;
            width: 100%;
            border-collapse: collapse;
        }
        .dataframe th {
            background-color: #0066cc;
            color: white;
            padding: 12px;
            text-align: left;
        }
        .dataframe td {
            padding: 12px;
            border-bottom: 1px solid #ddd;
        }
        .dataframe tr:nth-child(even) {
            background-color: #f8f9fa;
        }
        </style>
        """, unsafe_allow_html=True)
        
        # Hi·ªÉn th·ªã t·ª´ng b·∫£n ghi v·ªõi ·∫£nh
        for index, row in st.session_state.citizens_data.iterrows():
            with st.expander(f"C√¥ng d√¢n: {row['name']} - ID: {row['id']}"):
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if os.path.exists(row['image_path']):
                        st.image(row['image_path'], caption="·∫¢nh CCCD", use_column_width=True)
                    else:
                        st.warning("·∫¢nh kh√¥ng kh·∫£ d·ª•ng")
                
                with col2:
                    st.markdown(f"""
                    **ID:** {row['id']}  
                    **H·ªç t√™n:** {row['name']}  
                    **Ng√†y sinh:** {row['dob']}  
                    **ƒê·ªãa ch·ªâ:** {row['address']}  
                    **Ng√†y qu√©t:** {row['scan_date']}
                    """)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng d√¢n n√†o.")

def main():
    # Sidebar
    st.sidebar.markdown("<h1 style='text-align: center;'>üèõÔ∏è</h1>", unsafe_allow_html=True)
    st.sidebar.markdown("<h2 style='text-align: center;'>Qu·∫£n l√Ω C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    menu = ["Trang ch·ªß", "Qu√©t QR CCCD", "Xem d·ªØ li·ªáu"]
    choice = st.sidebar.selectbox("Ch·ªçn ch·ª©c nƒÉng", menu)
    
    if choice == "Trang ch·ªß":
        st.markdown("<h1 style='text-align: center;'>H·ªá th·ªëng Qu·∫£n l√Ω C√¥ng d√¢n</h1>", unsafe_allow_html=True)
        st.markdown("""
        <div class="info-card">
            <h2>Ch√†o m·ª´ng! üëã</h2>
            <p>ƒê√¢y l√† h·ªá th·ªëng qu·∫£n l√Ω th√¥ng tin c√¥ng d√¢n th√¥ng qua qu√©t m√£ QR tr√™n CCCD.</p>
            <h3>C√°c ch·ª©c nƒÉng ch√≠nh:</h3>
            <ul>
                <li>Qu√©t QR t·ª´ CCCD qua camera</li>
                <li>T·∫£i l√™n ·∫£nh CCCD ƒë·ªÉ qu√©t</li>
                <li>Xem v√† qu·∫£n l√Ω d·ªØ li·ªáu c√¥ng d√¢n</li>
            </ul>
        </div>
        """, unsafe_allow_html=True)
        
    elif choice == "Qu√©t QR CCCD":
        scan_qr_code()
        
    elif choice == "Xem d·ªØ li·ªáu":
        show_citizen_data()

if __name__ == '__main__':
    main()
