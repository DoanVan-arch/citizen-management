from operator import truediv
import streamlit as st
import cv2
import numpy as np
from pyzbar.pyzbar import decode
import pandas as pd
from datetime import datetime
import os
from PIL import Image
import av
from contextlib import contextmanager
import tempfile
from streamlit_webrtc import webrtc_streamer, VideoProcessorBase, RTCConfiguration
from streamlit_webrtc import webrtc_streamer, WebRtcMode, RTCConfiguration
# Th√™m try-except cho import asyncio ƒë·ªÉ x·ª≠ l√Ω l·ªói li√™n quan ƒë·∫øn asyncio
try:
    import asyncio
    import threading
    import uuid
    import json
    from typing import List, Dict, Any, Optional
    from aiortc import RTCPeerConnection, RTCSessionDescription, VideoStreamTrack
    from aiortc.contrib.media import MediaPlayer, MediaRecorder, MediaRelay
    import logging
    AIORTC_AVAILABLE = True
except ImportError as e:
    AIORTC_AVAILABLE = False
    st.warning(f"aiortc kh√¥ng kh·∫£ d·ª•ng: {str(e)}. Ch·ªâ s·ª≠ d·ª•ng ch·ª©c nƒÉng upload ·∫£nh.")

# Thi·∫øt l·∫≠p giao di·ªán trang
st.set_page_config(
    page_title="H·ªÜ TH·ªêNG QU·∫¢N L√ù C√îNG D√ÇN",
    page_icon="üìã",
    layout="wide",
    initial_sidebar_state="expanded"
)

# C·∫•u h√¨nh logging cho aiortc
if AIORTC_AVAILABLE:
    logging.basicConfig(level=logging.INFO)

# L∆∞u tr·ªØ c√°c k·∫øt n·ªëi peer
peer_connections = {}
videoframes = {}
class SafeRTCConfiguration:
    """Safe RTC configuration with error handling"""
    
    def __init__(self):
        self.ice_servers = []
        self.connection_timeout = 30
        self.gathering_timeout = 10
        self.retry_attempts = 3
    
    def get_safe_rtc_config(self) -> RTCConfiguration:
        """Get RTC configuration with error handling"""
        
        # Basic STUN servers (always working)
        safe_ice_servers = [
            {"urls": ["stun:stun.l.google.com:19302"]},
            {"urls": ["stun:stun1.l.google.com:19302"]},
        ]
        
        # Test additional servers
        additional_servers = [
            {"urls": ["stun:stun2.l.google.com:19302"]},
            {"urls": ["stun:stun3.l.google.com:19302"]},
            {"urls": ["stun:stun4.l.google.com:19302"]},
        ]
        
        for server in additional_servers:
            if self._test_stun_server(server["urls"][0]):
                safe_ice_servers.append(server)
        
        # Add TURN servers if available
        turn_servers = self._get_working_turn_servers()
        if turn_servers:
            safe_ice_servers.extend(turn_servers)
        
        return RTCConfiguration({
            "iceServers": safe_ice_servers,
            "iceConnectionTimeout": self.connection_timeout,
            "iceGatheringTimeout": self.gathering_timeout,
            "bundlePolicy": "balanced",
            "rtcpMuxPolicy": "require"
        })
    
    def _test_stun_server(self, stun_url: str, timeout: float = 2.0) -> bool:
        """Test if STUN server is reachable"""
        try:
            # Parse STUN URL
            if not stun_url.startswith("stun:"):
                return False
            
            host_port = stun_url[5:]  # Remove "stun:"
            if ":" in host_port:
                host, port = host_port.split(":", 1)
                port = int(port)
            else:
                host = host_port
                port = 3478
            
            # Test connection
            sock = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            sock.settimeout(timeout)
            
            try:
                sock.connect((host, port))
                return True
            except:
                return False
            finally:
                sock.close()
                
        except Exception as e:
            logger.warning(f"STUN server test failed for {stun_url}: {e}")
            return False
    
    def _get_working_turn_servers(self) -> List[Dict]:
        """Get working TURN servers"""
        turn_servers = []
        
        try:
            # Try Twilio TURN if configured
            if hasattr(st.secrets, 'webrtc') and 'twilio_account_sid' in st.secrets.webrtc:
                twilio_servers = self._get_twilio_turn_safe()
                if twilio_servers:
                    turn_servers.extend(twilio_servers)
            
            # Try other TURN providers
            # Add your TURN server configurations here
            
        except Exception as e:
            logger.warning(f"TURN server setup failed: {e}")
        
        return turn_servers
    
    def _get_twilio_turn_safe(self) -> List[Dict]:
        """Safely get Twilio TURN servers"""
        try:
            import requests
            
            account_sid = st.secrets.webrtc.twilio_account_sid
            auth_token = st.secrets.webrtc.twilio_auth_token
            
            url = f"https://api.twilio.com/2010-04-01/Accounts/{account_sid}/Tokens.json"
            
            response = requests.post(
                url, 
                auth=(account_sid, auth_token),
                timeout=5  # Short timeout
            )
            
            if response.status_code == 201:
                token_data = response.json()
                return token_data.get("ice_servers", [])
            
        except Exception as e:
            logger.warning(f"Twilio TURN failed: {e}")
        
        return []

class ObjectDetectionTransformer(VideoProcessorBase):
    def recv(self, frame):
       
        img = frame.to_ndarray(format="bgr24")
        
        # Thu00eam logic phu00e1t hiu1ec7n u0111u1ed1i tu01b0u1ee3ng u1edf u0111u00e2y
        # (Cu00f3 thu1ec3 su1eed du1ee5ng OpenCV, YOLO, hou1eb7c cu00e1c model khu00e1c)
        
        return av.VideoFrame.from_ndarray(img, format="bgr24")
# L·ªõp VideoProcessor cho aiortc
class VideoProcessor:
    def __init__(self, callback=None):
        self.callback = callback
        self.qr_detected = False
        self.qr_data = None
        
    def process(self, frame):
        img = frame.to_ndarray(format="bgr24")
        
        # N·∫øu c√≥ callback, g·ªçi n√≥ ƒë·ªÉ x·ª≠ l√Ω frame
        if self.callback:
            img = self.callback(img)
            
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# L·ªõp VideoStreamTrack t√πy ch·ªânh
class VideoTransformTrack(VideoStreamTrack):
    def __init__(self, track, processor=None):
        super().__init__()
        self.track = track
        self.processor = processor if processor else VideoProcessor()

    async def recv(self):
        frame = await self.track.recv()
        if self.processor:
            frame = self.processor.process(frame)
        return frame

# L·ªõp QRCodeProcessor
class QRCodeProcessor(VideoProcessor):
    def process(self, frame):
        img = frame.to_ndarray(format="bgr24")
        
        # X·ª≠ l√Ω QR code
        try:
            # Chuy·ªÉn sang RGB ƒë·ªÉ x·ª≠ l√Ω
            frame_rgb = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
            decoded_objects = decode(frame_rgb)
            
            for obj in decoded_objects:
                # V·∫Ω khung xung quanh QR code
                points = obj.polygon
                if len(points) > 4:
                    hull = cv2.convexHull(np.array([point for point in points], dtype=np.float32))
                    cv2.polylines(img, [hull], True, (0, 255, 0), 2)
                else:
                    cv2.polylines(img, [np.array(points, dtype=np.int32)], True, (0, 255, 0), 2)
                
                # Gi·∫£i m√£ QR
                qr_data = obj.data.decode('utf-8')
                self.qr_data = qr_data
                self.qr_detected = True
                
                # Hi·ªÉn th·ªã th√¥ng tin
                cv2.putText(img, "QR Code Detected!", (10, 30),
                           cv2.FONT_HERSHEY_SIMPLEX, 1, (0, 255, 0), 2)
                
        except Exception as e:
            print(f"Error processing QR code: {str(e)}")
            
        return av.VideoFrame.from_ndarray(img, format="bgr24")

# CSS t√πy ch·ªânh
st.markdown("""
    <style>
    .main {
        padding: 20px;
    }
    .stButton>button {
        width: 100%;
        margin-top: 10px;
        background-color: #0066cc;
        color: white;
        border-radius: 5px;
        padding: 10px 20px;
        transition: all 0.3s ease;
    }
    .stButton>button:hover {
        background-color: #004d99;
        transform: translateY(-2px);
        box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    .success-message {
        padding: 20px;
        background-color: #4CAF50;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .error-message {
        padding: 20px;
        background-color: #f44336;
        color: white;
        margin-bottom: 15px;
        border-radius: 5px;
        box-shadow: 0 2px 5px rgba(0,0,0,0.1);
    }
    .info-card {
        padding: 20px;
        background-color: #f8f9fa;
        border-radius: 10px;
        margin-bottom: 20px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        transition: all 0.3s ease;
    }
    .info-card:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.2);
    }
    .feature-button {
        background-color: #ffffff;
        border: 1px solid #ddd;
        padding: 20px;
        border-radius: 10px;
        text-align: center;
        margin: 10px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    .feature-button:hover {
        transform: translateY(-5px);
        box-shadow: 0 5px 15px rgba(0,0,0,0.1);
    }
    .camera-feed {
        border-radius: 10px;
        overflow: hidden;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .sidebar .sidebar-content {
        background-color: #f8f9fa;
    }
    .login-form {
        max-width: 500px;
        margin: 0 auto;
        padding: 30px;
        background-color: #f8f9fa;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    }
    .login-header {
        text-align: center;
        margin-bottom: 20px;
    }
    </style>
    """, unsafe_allow_html=True)


# Kh·ªüi t·∫°o session state
if 'citizens_data' not in st.session_state:
    st.session_state.citizens_data = pd.DataFrame(columns=[
        'id', 'cccd', 'name', 'dob', 'sex', 'address', 'expdate', 'scan_date', 'image_path'
    ])

# Th√™m session state cho ƒëƒÉng nh·∫≠p
if 'logged_in' not in st.session_state:
    st.session_state.logged_in = False

if 'username' not in st.session_state:
    st.session_state.username = ""

# Th√™m session state cho ƒëi·ªÅu h∆∞·ªõng trang
if 'page' not in st.session_state:
    st.session_state.page = None
    
# Th√™m session state cho menu choice
if 'menu_choice' not in st.session_state:
    st.session_state.menu_choice = "Trang ch·ªß"

# Th√™m session state cho aiortc
if 'peer_connection_id' not in st.session_state:
    st.session_state.peer_connection_id = None

if 'video_processor' not in st.session_state:
    st.session_state.video_processor = None

# Danh s√°ch t√†i kho·∫£n m·∫´u (trong th·ª±c t·∫ø n√™n l∆∞u trong c∆° s·ªü d·ªØ li·ªáu v√† m√£ h√≥a m·∫≠t kh·∫©u)
USERS = {
    "admin": "admin123",
    "user": "user123"
}

# ICE servers configuration for aiortc
ICE_SERVERS = [
    {"urls": ["stun:stun.l.google.com:19302"]}
]

# H√†m x·ª≠ l√Ω aiortc
async def process_offer(offer, video_processor=None):
    #offer = RTCSessionDescription(sdp=params["sdp"], type=params["type"])
    pc_id = str(uuid.uuid4())
    pc = RTCPeerConnection()
    peer_connections[pc_id] = pc
    
    relay = MediaRelay()
    
    @pc.on("track")
    def on_track(track):
        if track.kind == "video":
            # S·ª≠ d·ª•ng video processor n·∫øu c√≥
            if video_processor:
                transformed_track = VideoTransformTrack(relay.subscribe(track), processor=video_processor)
            else:
                # M·∫∑c ƒë·ªãnh ch·ªâ chuy·ªÉn ti·∫øp video
                transformed_track = VideoTransformTrack(relay.subscribe(track))
                
            pc.addTrack(transformed_track)
    
    # Thi·∫øt l·∫≠p k·∫øt n·ªëi
    if offer and offer.get("sdp"):
        offer = RTCSessionDescription(sdp=offer["sdp"], type=offer["type"])
        await pc.setRemoteDescription(offer)
        answer = await pc.createAnswer()
        await pc.setLocalDescription(answer)
        
        # L∆∞u ID k·∫øt n·ªëi
        st.session_state.peer_connection_id = pc_id
        
        return {"sdp": pc.localDescription.sdp, "type": pc.localDescription.type}, pc_id
    else:
        # N·∫øu kh√¥ng c√≥ offer, t·∫°o m·ªôt local stream
        local_video = VideoTransformTrack(MediaPlayer('default:none', format='bgr24').video, processor=video_processor)
        pc.addTrack(local_video)
        
        # T·∫°o offer
        offer = await pc.createOffer()
        await pc.setLocalDescription(offer)
        
        # L∆∞u ID k·∫øt n·ªëi
        st.session_state.peer_connection_id = pc_id
        
        return {"sdp": pc.localDescription.sdp, "type": pc.localDescription.type}, pc_id

async def close_peer_connection(pc_id):
    if pc_id in peer_connections:
        pc = peer_connections[pc_id]
        await pc.close()
        del peer_connections[pc_id]

def setup_asyncio():
    """Setup asyncio event loop for WebRTC"""
    try:
        loop = asyncio.get_event_loop()
        if loop.is_closed():
            asyncio.set_event_loop(asyncio.new_event_loop())
    except RuntimeError:
        asyncio.set_event_loop(asyncio.new_event_loop())

@contextmanager
def aiortc_context():
    """Context manager for aiortc operations"""
    try:
        setup_asyncio()
        yield
    except Exception as e:
        st.error(f"aiortc Error: {str(e)}")
        st.info("Please try refreshing the page or use the image upload feature instead.")

def create_webrtc_component(key, video_processor=None):
    """Create a WebRTC component using aiortc"""
    if not AIORTC_AVAILABLE:
        st.error("aiortc kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng upload ·∫£nh.")
        return None
    
    # T·∫°o container cho video
    video_container = st.empty()
    status_container = st.empty()
    
    # T·∫°o c√°c n√∫t ƒëi·ªÅu khi·ªÉn
    col1, col2 = st.columns(2)
    start_button = col1.button("B·∫Øt ƒë·∫ßu Camera", key=f"start_{key}")
    stop_button = col2.button("D·ª´ng Camera", key=f"stop_{key}")
    
    # T·∫°o JavaScript ƒë·ªÉ truy c·∫≠p camera
    js_code = """
    <script>
    const getWebcamVideo = async () => {
        try {
            const stream = await navigator.mediaDevices.getUserMedia({ video: true, audio: false });
            const videoTracks = stream.getVideoTracks();
            const track = videoTracks[0];
            
            // Create peer connection
            const pc = new RTCPeerConnection({
                iceServers: [{urls: ['stun:stun.l.google.com:19302']}]
            });
            
            // Add track to peer connection
            pc.addTrack(track, stream);
            
            // Create offer
            const offer = await pc.createOffer();
            await pc.setLocalDescription(offer);
            
            // Send offer to server
            const response = await fetch('/_stcore/stream', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    type: 'webrtc_offer',
                    sdp: pc.localDescription.sdp,
                    session_id: '%s'
                }),
            });
            
            const data = await response.json();
            const answer = new RTCSessionDescription({
                type: 'answer',
                sdp: data.sdp
            });
            
            await pc.setRemoteDescription(answer);
            
            return pc;
        } catch (err) {
            console.error('Error accessing webcam:', err);
            return null;
        }
    };
    
    // Start webcam when button is clicked
    const startButton = document.querySelector('button[data-testid="start_%s"]');
    if (startButton) {
        startButton.addEventListener('click', () => {
            getWebcamVideo().then(pc => {
                window.webrtcPc = pc;
            });
        });
    }
    
    // Stop webcam when button is clicked
    const stopButton = document.querySelector('button[data-testid="stop_%s"]');
    if (stopButton) {
        stopButton.addEventListener('click', () => {
            if (window.webrtcPc) {
                window.webrtcPc.close();
                window.webrtcPc = null;
            }
        });
    }
    </script>
    """ % (key, key, key)
    
    # Inject JavaScript
    st.markdown(js_code, unsafe_allow_html=True)
    
    # X·ª≠ l√Ω khi nh·∫•n n√∫t b·∫Øt ƒë·∫ßu
    if start_button:
        status_container.info("ƒêang k·∫øt n·ªëi camera...")
        
        # T·∫°o placeholder cho video stream
        video_container.image(np.zeros((480, 640, 3), dtype=np.uint8), channels="RGB", use_container_width=True)
        
        # L∆∞u processor
        st.session_state.video_processor = video_processor
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i
        status_container.success("Camera ƒëang ho·∫°t ƒë·ªông")
        
    # X·ª≠ l√Ω khi nh·∫•n n√∫t d·ª´ng
    if stop_button and st.session_state.peer_connection_id:
        # ƒê√≥ng k·∫øt n·ªëi n·∫øu c√≥
        if st.session_state.peer_connection_id:
            loop = asyncio.new_event_loop()
            asyncio.set_event_loop(loop)
            loop.run_until_complete(close_peer_connection(st.session_state.peer_connection_id))
            
            # X√≥a ID k·∫øt n·ªëi
            st.session_state.peer_connection_id = None
            st.session_state.video_processor = None
        
        # Hi·ªÉn th·ªã tr·∫°ng th√°i
        status_container.info("Camera ƒë√£ d·ª´ng")
        video_container.empty()
    
    return st.session_state.video_processor

def login_page():
    st.markdown("<h1 style='text-align: center;'>ƒêƒÉng nh·∫≠p H·ªá th·ªëng</h1>", unsafe_allow_html=True)
    
    col1, col2, col3 = st.columns([1, 2, 1])
    
    with col2:
        st.markdown("""
        <div class="info-card" style="padding: 30px;">
            <h3 style="text-align: center;">ƒêƒÉng nh·∫≠p</h3>
            <p style="text-align: center;">Vui l√≤ng nh·∫≠p th√¥ng tin ƒëƒÉng nh·∫≠p c·ªßa b·∫°n.</p>
        </div>
        """, unsafe_allow_html=True)
        
        username = st.text_input("T√™n ƒëƒÉng nh·∫≠p")
        password = st.text_input("M·∫≠t kh·∫©u", type="password")
        
        if st.button("ƒêƒÉng nh·∫≠p"):
            if username in USERS and USERS[username] == password:
                st.session_state.logged_in = True
                st.session_state.username = username
                st.success(f"ƒêƒÉng nh·∫≠p th√†nh c√¥ng! Ch√†o m·ª´ng, {username}")
                st.rerun()
            else:
                st.error("T√™n ƒëƒÉng nh·∫≠p ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng!")

def video_frame_callback(frame):
    img = frame.to_ndarray(format="bgr24")
    flipped = img[::-1,:,:]
    return av.VideoFrame.from_ndarray(flipped, format="bgr24")

# Create a processor for flipping video
class FlipVideoProcessor(VideoProcessor):
    def process(self, frame):
        img = frame.to_ndarray(format="bgr24")
        flipped = img[::-1,:,:]
        return av.VideoFrame.from_ndarray(flipped, format="bgr24")
rtc_configuration = RTCConfiguration({
            "iceServers": [
                {"urls": ["stun:stun2.l.google.com:19302"]},
                {"urls": ["stun:stun3.l.google.com:19302"]},
                {"urls": ["stun:stun4.l.google.com:19302"]},
                {"urls": ["stun:stun.services.mozilla.com:3478"]},
                {"urls": ["stun:stun5.l.google.com:19302"]},
                {"urls": ["stun:stun.cloudflare.com:3478"]},
                {"urls": ["stun:stun.l.google.com:19302"]},
                {"urls": ["stun:stun1.l.google.com:19302"]},
            ]
        })
def get_ice_connection_fix_config():
    """Get RTC configuration specifically designed to fix ICE connection issues"""
    
    # Multiple STUN servers for redundancy
    stun_servers = [
        {"urls": ["stun:stun.l.google.com:19302"]},
        {"urls": ["stun:stun1.l.google.com:19302"]},
        {"urls": ["stun:stun2.l.google.com:19302"]},
        {"urls": ["stun:stun.cloudflare.com:3478"]},
        {"urls": ["stun:stun.services.mozilla.com:3478"]},
    ]
    
    # Free TURN servers for NAT traversal
    turn_servers = [
        {
            "urls": ["turn:openrelay.metered.ca:80"],
            "username": "openrelayproject",
            "credential": "openrelayproject"
        },
        {
            "urls": ["turn:openrelay.metered.ca:443"],
            "username": "openrelayproject", 
            "credential": "openrelayproject"
        },
        {
            "urls": ["turn:openrelay.metered.ca:443?transport=tcp"],
            "username": "openrelayproject",
            "credential": "openrelayproject"
        }
    ]
    
    # Twilio TURN servers (if configured)
   
    
    all_ice_servers = stun_servers + turn_servers
    
    # Optimized RTC configuration for ICE connection issues
    rtc_config = RTCConfiguration({
        "iceServers": all_ice_servers,
        "iceTransportPolicy": "all",  # Use both STUN and TURN
        "bundlePolicy": "max-bundle",
        "rtcpMuxPolicy": "require",
        "iceCandidatePoolSize": 20,  # Increase candidate pool
        "iceConnectionTimeout": 45000,  # 45 seconds timeout
        "iceGatheringTimeout": 20000,   # 20 seconds gathering
        "continualGatheringPolicy": "gather_continually"  # Keep gathering
    })
    
    return rtc_config
flip = st.checkbox("Flip")


def video_frame_callback(frame):
    img = frame.to_ndarray(format="bgr24")

    flipped = img[::-1,:,:] if flip else img

    return av.VideoFrame.from_ndarray(flipped, format="bgr24")

    return frame
def surveillance_camera():
    st.markdown("<h2 style='text-align: center;'>Gi√°m s√°t Camera</h2>", unsafe_allow_html=True)
    
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.markdown("""
        <div class="info-card">
        <h3>Gi√°m s√°t an ninh</h3>
        <p>Theo d√µi v√† ph√°t hi·ªán ƒë·ªëi t∆∞·ª£ng qua camera</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Add option to choose between aiortc and file upload
        camera_option = st.radio(
            "Ch·ªçn ph∆∞∆°ng th·ª©c:",
            ["Camera tr·ª±c ti·∫øp (aiortc)", "Upload video/·∫£nh"],
            key="camera_option"
        )
        
        if camera_option == "Camera tr·ª±c ti·∫øp (aiortc)":
            try:
                if AIORTC_AVAILABLE:
                    safe_rtc = SafeRTCConfiguration()
                    rtc_config = safe_rtc.get_safe_rtc_config() 
                    # S·ª≠ d·ª•ng aiortc
                    processor = FlipVideoProcessor()
                    webrtc_ctx = webrtc_streamer(
                    key="camera-stream",
                    mode=WebRtcMode.SENDRECV,
                    rtc_configuration=get_ice_connection_fix_config(),
                    video_processor_factory=ObjectDetectionTransformer,
                    video_frame_callback=video_frame_callback,
                    media_stream_constraints={
                        "video": {
                    "width": {"min": 320, "ideal": 640, "max": 1280},
                    "height": {"min": 240, "ideal": 480, "max": 720},
                    "frameRate": {"min": 10, "ideal": 15, "max": 30}  # Lower FPS for stability
                },
                        "audio": False
                    },
                    async_processing=False,
                    sendback_audio=False,
                )
                    
                    # Display connection status
                    if st.session_state.peer_connection_id:
                        st.success("‚úÖ Camera ƒëang ho·∫°t ƒë·ªông")
                    else:
                        st.info("üì∑ Nh·∫•n 'B·∫Øt ƒë·∫ßu Camera' ƒë·ªÉ b·∫Øt ƒë·∫ßu camera")
                else:
                    st.error("aiortc kh√¥ng kh·∫£ d·ª•ng. Vui l√≤ng s·ª≠ d·ª•ng ch·ª©c nƒÉng upload ·∫£nh.")
                    
            except Exception as e:
                st.error(f"L·ªói k·∫øt n·ªëi camera: {str(e)}")
                st.info("Vui l√≤ng th·ª≠ s·ª≠ d·ª•ng t√πy ch·ªçn 'Upload video/·∫£nh' b√™n d∆∞·ªõi")
                
        else:
            # Alternative: File upload for surveillance
            uploaded_file = st.file_uploader(
                "T·∫£i l√™n video ho·∫∑c ·∫£nh ƒë·ªÉ ph√¢n t√≠ch",
                type=['mp4', 'avi', 'mov', 'jpg', 'jpeg', 'png'],
                key="surveillance_upload"
            )
            
            if uploaded_file is not None:
                if uploaded_file.type.startswith('image'):
                    image = Image.open(uploaded_file)
                    st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
                    
                    if st.button("Ph√¢n t√≠ch ·∫£nh"):
                        st.success("ƒêang ph√¢n t√≠ch ·∫£nh...")
                        # Add your image analysis logic here
                        
                else:
                    st.video(uploaded_file)
                    if st.button("Ph√¢n t√≠ch video"):
                        st.success("ƒêang ph√¢n t√≠ch video...")
                        # Add your video analysis logic here

    with col2:
        st.markdown("""
        <div class="info-card">
        <h3>ƒêi·ªÅu khi·ªÉn Camera</h3>
        <p>C√†i ƒë·∫∑t v√† ƒëi·ªÅu khi·ªÉn camera gi√°m s√°t</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Camera controls
        detection_options = st.multiselect(
            "Ch·ªçn c√°c ƒë·ªëi t∆∞·ª£ng c·∫ßn ph√°t hi·ªán:",
            ["Khu√¥n m·∫∑t", "Ph∆∞∆°ng ti·ªán", "V·∫≠t th·ªÉ kh·∫£ nghi"],
            default=["Khu√¥n m·∫∑t"],
            key="detection_options"
        )
        
        sensitivity = st.slider("ƒê·ªô nh·∫°y ph√°t hi·ªán", 0, 100, 50, key="sensitivity")
        
        if st.button("Ch·ª•p ·∫£nh", key="capture_btn"):
            st.success("·∫¢nh ƒë√£ ƒë∆∞·ª£c ch·ª•p th√†nh c√¥ng!")
            
        # Add troubleshooting section
        with st.expander("üîß Kh·∫Øc ph·ª•c s·ª± c·ªë"):
            st.markdown("""
            **N·∫øu camera kh√¥ng ho·∫°t ƒë·ªông:**
            1. L√†m m·ªõi trang (F5)
            2. Ki·ªÉm tra quy·ªÅn truy c·∫≠p camera
            3. Th·ª≠ s·ª≠ d·ª•ng tr√¨nh duy·ªát kh√°c
            4. S·ª≠ d·ª•ng t√πy ch·ªçn 'Upload video/·∫£nh'
            """)

def process_image_for_qr(image):
    """
    X·ª≠ l√Ω ·∫£nh ƒë·ªÉ t√¨m v√† gi·∫£i m√£ QR code
    """
    try:
        # Chuy·ªÉn ƒë·ªïi ·∫£nh sang ƒë·ªãnh d·∫°ng ph√π h·ª£p
        if isinstance(image, np.ndarray):
            frame_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        else:
            frame_rgb = np.array(image)

        # Gi·∫£i m√£ QR
        decoded_objects = decode(frame_rgb)
        
        for obj in decoded_objects:
            qr_data = obj.data.decode('utf-8')
            citizen_info = qr_data.split('|')
            
            if len(citizen_info) >= 7:
                # T·∫°o th∆∞ m·ª•c l∆∞u ·∫£nh n·∫øu ch∆∞a t·ªìn t·∫°i
                os.makedirs("uploaded_images", exist_ok=True)
                
                # T·∫°o t√™n file ·∫£nh v·ªõi timestamp
                timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
                image_filename = f"citizen_image_{timestamp}.jpg"
                image_path = os.path.join("uploaded_images", image_filename)
                
                # L∆∞u ·∫£nh
                if isinstance(image, np.ndarray):
                    cv2.imwrite(image_path, cv2.cvtColor(image, cv2.COLOR_RGB2BGR))
                else:
                    image.save(image_path)
    
                # T·∫°o b·∫£n ghi m·ªõi
                new_data = {
                    'id': citizen_info[0],
                    'cccd': citizen_info[1],
                    'name': citizen_info[2],
                    'dob': citizen_info[3],
                    'sex': citizen_info[4],
                    'address': citizen_info[5],
                    'expdate': citizen_info[6],
                    'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                    'image_path': image_path
                }
                
                # C·∫≠p nh·∫≠t DataFrame
                st.session_state.citizens_data = pd.concat([
                    st.session_state.citizens_data,
                    pd.DataFrame([new_data])
                ], ignore_index=True)
                
                return True, "QR code processed successfully!"
                
        return False, "L·ªói kh√¥ng x√°c ƒë·ªãnh."
    
    except Exception as e:
        return False, f"L·ªói: {str(e)}"

def scan_qr_code():
    """Enhanced QR code scanning with better error handling"""
    st.markdown("<h2 style='text-align: center;'>Qu√©t m√£ QR CCCD</h2>", unsafe_allow_html=True)
    
    # Create tabs for different input methods
    tab1, tab2 = st.tabs(["üìÅ Upload ·∫¢nh", "üì∑ Camera"])
    
    with tab1:
        st.markdown("""
        <div class="info-card">
        <h3>T·∫£i l√™n ·∫£nh QR Code</h3>
        <p>ƒê·ªãnh d·∫°ng h·ªó tr·ª£: JPG, JPEG, PNG</p>
        </div>
        """, unsafe_allow_html=True)
        
        uploaded_file = st.file_uploader(
            "Ch·ªçn ·∫£nh ch·ª©a QR code", 
            type=['jpg', 'jpeg', 'png'],
            key="qr_upload"
        )
        
        if uploaded_file is not None:
            image = Image.open(uploaded_file)
            st.image(image, caption="·∫¢nh ƒë√£ t·∫£i l√™n", use_container_width=True)
            
            if st.button("X·ª≠ l√Ω QR Code", key="process_qr"):
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    success, message = process_image_for_qr(image)
                    if success:
                        st.success(message)
                    else:
                        st.error(message)
    
    with tab2:
        st.markdown("""
        <div class="info-card">
        <h3>Qu√©t qua Camera</h3>
        <p>S·ª≠ d·ª•ng camera ƒë·ªÉ qu√©t QR code tr·ª±c ti·∫øp</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Use Streamlit's native camera input
        camera_image = st.camera_input("Qu√©t m√£ QR", key="qr_camera")
        
        if camera_image is not None:
            # Process the captured image
            image = Image.open(camera_image)
            image_array = np.array(image)
            
            # Display the image
            st.image(image_array, caption="·∫¢nh ƒë√£ ch·ª•p", use_container_width=True)
            
            # Process for QR code
            if st.button("X·ª≠ l√Ω QR Code", key="process_camera_qr"):
                with st.spinner("ƒêang x·ª≠ l√Ω..."):
                    success, message = process_image_for_qr(image)
                    if success:
                        st.success(message)
                    else:
                        st.error("Kh√¥ng t√¨m th·∫•y m√£ QR trong ·∫£nh. Vui l√≤ng th·ª≠ l·∫°i.")

def process_qr_detection(qr_data):
    """Process detected QR code data"""
    try:
        citizen_info = qr_data.split('|')
        
        if len(citizen_info) >= 7:
            st.success("‚úÖ QR code ƒë√£ ƒë∆∞·ª£c ph√°t hi·ªán v√† x·ª≠ l√Ω th√†nh c√¥ng!")
            
            # Save information to DataFrame
            new_data = {
                'id': citizen_info[0],
                'cccd': citizen_info[1],
                'name': citizen_info[2],
                'dob': citizen_info[3],
                'sex': citizen_info[4],
                'address': citizen_info[5],
                'expdate': citizen_info[6],
                'scan_date': datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
                'image_path': "camera_capture"
            }
            
            st.session_state.citizens_data = pd.concat([
                st.session_state.citizens_data,
                pd.DataFrame([new_data])
            ], ignore_index=True)
            
            # Display citizen information
            display_citizen_info(citizen_info)
            
    except Exception as e:
        st.error(f"L·ªói x·ª≠ l√Ω QR code: {str(e)}")

def display_citizen_info(citizen_info):
    """Display citizen information in a formatted way"""
    st.markdown("""
    <div style="background-color: #e8f5e9; padding: 20px; border-radius: 10px; margin-top: 20px;">
    <h4 style="color: #2e7d32;">Th√¥ng tin c√¥ng d√¢n:</h4>
    </div>
    """, unsafe_allow_html=True)
    
    col1, col2 = st.columns(2)
    with col1:
        st.write(f"**ID:** {citizen_info[0]}")
        st.write(f"**S·ªë CCCD:** {citizen_info[1]}")
        st.write(f"**H·ªç v√† t√™n:** {citizen_info[2]}")
        st.write(f"**Ng√†y sinh:** {citizen_info[3]}")
    
    with col2:
        st.write(f"**Gi·ªõi t√≠nh:** {citizen_info[4]}")
        st.write(f"**ƒê·ªãa ch·ªâ:** {citizen_info[5]}")
        st.write(f"**Ng√†y h·∫øt h·∫°n:** {citizen_info[6]}")

# Add this to the top of your main() function
def reset_session_on_error():
    """Reset session state if there are WebRTC errors"""
    if 'aiortc_error_count' not in st.session_state:
        st.session_state.aiortc_error_count = 0
    
    if st.session_state.aiortc_error_count > 3:
        st.warning("Ph√°t hi·ªán nhi·ªÅu l·ªói aiortc. ƒêang reset session...")
        for key in list(st.session_state.keys()):
            if 'aiortc' in key.lower() or 'peer' in key.lower():
                del st.session_state[key]
        st.session_state.aiortc_error_count = 0
        st.rerun()

def show_citizen_data():
    st.markdown("<h2 style='text-align: center;'>D·ªØ li·ªáu C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    if not st.session_state.citizens_data.empty:
        for index, row in st.session_state.citizens_data.iterrows():
            with st.expander(f"C√¥ng d√¢n:{row['name']} - CCCD: {row['cccd']}"):
                col1, col2 = st.columns([1, 2])
                
                with col1:
                    if os.path.exists(row['image_path']):
                        st.image(row['image_path'], caption="·∫£nh CCCD", use_container_width=True)
                    else:
                        st.warning("·∫¢nh CCCD kh√¥ng t·ªìn t·∫°i!")
                
                with col2:
                    st.markdown(f"""
                    **ID:** {row['id']}  
                    **S·ªë CCCD:** {row['cccd']}  
                    **T√™n:** {row['name']}  
                    **Ng√†y sinh:** {row['dob']}  
                    **Gi·ªõi t√≠nh:** {row['sex']}  
                    **ƒê·ªãa ch·ªâ:** {row['address']}  
                    **Ng√†y h·∫øt h·∫°n:** {row['expdate']}  
                    **Ng√†y qu√©t:** {row['scan_date']}
                    """)
    else:
        st.info("Ch∆∞a c√≥ d·ªØ li·ªáu c√¥ng d√¢n n√†o.")


def show_homepage():
    st.markdown("<h1 style='text-align: center;'>H·ªá th·ªëng Qu·∫£n l√Ω C√¥ng d√¢n</h1>", unsafe_allow_html=True)
    
    # Grid layout cho c√°c ch·ª©c nƒÉng
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.markdown("""
        <div class="feature-button">
            <h3>Qu√©t QR CCCD</h3>
            <p>Qu√©t m√£ QR t·ª´ CCCD</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng qu√©t QR
        if st.button("Qu√©t QR CCCD"):
            st.session_state.page = "scan_qr"
            st.session_state.menu_choice = "Qu√©t QR CCCD"
            st.rerun()
        
    with col2:
        st.markdown("""
        <div class="feature-button">
            <h3>Qu·∫£n l√Ω C√¥ng d√¢n</h3>
            <p>Qu·∫£n l√Ω d·ªØ li·ªáu c√¥ng d√¢n hi·ªáu qu·∫£ v√† d·ªÖ d√†ng.</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng qu·∫£n l√Ω d·ªØ li·ªáu
        if st.button("Xem d·ªØ li·ªáu c√¥ng d√¢n"):
            st.session_state.page = "view_data"
            st.session_state.menu_choice = "Xem d·ªØ li·ªáu"
            st.rerun()
        
    with col3:
        st.markdown("""
        <div class="feature-button">
            <h3>Camera Gi√°m S√°t</h3>
            <p>Theo d√µi qua camera an ninh</p>
        </div>
        """, unsafe_allow_html=True)
        
        # N√∫t k·∫øt n·ªëi v·ªõi ch·ª©c nƒÉng camera gi√°m s√°t
        if st.button("Camera gi√°m s√°t"):
            st.session_state.page = "camera"
            st.session_state.menu_choice = "Camera Gi√°m s√°t"
            st.rerun()
    
    # Ki·ªÉm tra n·∫øu c√≥ chuy·ªÉn trang t·ª´ c√°c n√∫t
    if 'page' in st.session_state:
        if st.session_state.page == "scan_qr":
            scan_qr_code()
            st.session_state.page = None
        elif st.session_state.page == "view_data":
            show_citizen_data()
            st.session_state.page = None
        elif st.session_state.page == "camera":
            surveillance_camera()
            st.session_state.page = None

def show_statistics():
    st.markdown("<h2 style='text-align: center;'>Th·ªëng k√™</h2>", unsafe_allow_html=True)
    st.write("Hi·ªÉn th·ªã c√°c s·ªë li·ªáu th·ªëng k√™ li√™n quan ƒë·∫øn c√¥ng d√¢n.")
    # Th√™m code hi·ªÉn th·ªã th·ªëng k√™

def show_settings():
    st.markdown("<h2 style='text-align: center;'>C√†i ƒë·∫∑t</h2>", unsafe_allow_html=True)
    st.write("T√πy ch·ªânh c√°c thi·∫øt l·∫≠p c·ªßa h·ªá th·ªëng t·∫°i ƒë√¢y.")
    # Th√™m code c√†i ƒë·∫∑t
from pathlib import Path

# Cloud environment detection
def is_streamlit_cloud():
    """Detect if running on Streamlit Cloud"""
    return (
        os.getenv("STREAMLIT_SHARING_MODE") == "true" or
        "streamlit.io" in os.getenv("HOSTNAME", "") or
        os.path.exists("/.streamlit")
    )
def setup_cloud_environment():
    """Setup environment cho Streamlit Cloud"""
    
    if is_streamlit_cloud():
        st.sidebar.info("üåê Running on Streamlit Cloud")
        
        # Cloud-specific configurations
        os.environ["OPENCV_VIDEOIO_PRIORITY_MSMF"] = "0"  # Disable MSMF on Windows
        os.environ["OPENCV_VIDEOIO_MSMF_ENABLE_HW_TRANSFORMS"] = "0"
        
        # Temporary directories
        temp_dirs = ["/tmp/uploads", "/tmp/rtc_cache", "/tmp/video_processing"]
        for temp_dir in temp_dirs:
            Path(temp_dir).mkdir(exist_ok=True)
        
        return True
    else:
        st.sidebar.info("üíª Running locally")
        return False
def main():
    # Ki·ªÉm tra ƒëƒÉng nh·∫≠p
    if not st.session_state.logged_in:
        login_page()
        return
    is_cloud = setup_cloud_environment()
    if is_cloud:
        st.info("""
        üåê **Cloud Deployment Notes:**
        - HTTPS enabled automatically
        - Camera access requires user permission
        - File uploads limited to 200MB
        - Temporary files auto-cleaned
        """)
    # Hi·ªÉn th·ªã giao di·ªán ch√≠nh sau khi ƒëƒÉng nh·∫≠p
    st.sidebar.markdown("<h1 style='text-align: center;'>Ch√†o m·ª´ng üì∑</h1>", unsafe_allow_html=True)
    st.sidebar.markdown("<h2 style='text-align: center;'>Qu·∫£n l√Ω C√¥ng d√¢n</h2>", unsafe_allow_html=True)
    
    # Hi·ªÉn th·ªã th√¥ng tin ng∆∞·ªùi d√πng ƒëƒÉng nh·∫≠p
    st.sidebar.markdown(f"""<div style='text-align: center; padding: 10px; background-color: #e8f5e9; 
                        border-radius: 5px; margin-bottom: 20px;'>
                         <b>{st.session_state.username}</b></div>""", 
                        unsafe_allow_html=True)
    
    menu = [
        "Trang ch·ªß",
        "Qu√©t QR CCCD",
        "Xem d·ªØ li·ªáu",
        "Camera Gi√°m s√°t",
        "Th·ªëng k√™",
        "C√†i ƒë·∫∑t"
    ]
    
    choice = st.sidebar.selectbox(
        "Ch·ªçn ch·ª©c nƒÉng", 
        menu, 
        index=menu.index(st.session_state.menu_choice),
        key="main_menu"
    )
    
    # Hi·ªÉn th·ªã c√°c n√∫t ch·ª©c nƒÉng ph·ª• trong sidebar
    st.sidebar.markdown("---")
    st.sidebar.markdown("### Ch·ª©c nƒÉng nhanh")
    
    if st.sidebar.button("üì∑ Camera"):
        st.session_state.page = "camera"
        st.session_state.menu_choice = "Camera Gi√°m s√°t"
        st.rerun()
      
    if st.sidebar.button("üìä B√°o c√°o"):
        st.session_state.page = "reports"
        st.session_state.menu_choice = "Th·ªëng k√™"
        st.rerun()
        
    if st.sidebar.button("‚öôÔ∏è C√†i ƒë·∫∑t"):
        st.session_state.page = "settings"
        st.session_state.menu_choice = "C√†i ƒë·∫∑t"
        st.rerun()
    
    # N√∫t ƒëƒÉng xu·∫•t
    if st.sidebar.button("üö™ ƒêƒÉng xu·∫•t"):
        st.session_state.logged_in = False
        st.session_state.username = ""
        st.rerun()

    if choice == "Trang ch·ªß":
        show_homepage()
    elif choice == "Qu√©t QR CCCD":
        scan_qr_code()
    elif choice == "Xem d·ªØ li·ªáu":
        show_citizen_data()
    elif choice == "Camera Gi√°m s√°t":
        surveillance_camera()
    elif choice == "Th·ªëng k√™":
        show_statistics()
    elif choice == "C√†i ƒë·∫∑t":
        show_settings()

if __name__ == '__main__':
    main()